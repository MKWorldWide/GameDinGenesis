import React, { Suspense, lazy } from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import { AuthProvider, useAuth } from './hooks/useAuth';
import { ThemeProvider } from './context/ThemeContext';
import { ToastProvider } from './context/ToastContext';
import { QuantumFidelityProvider } from './context/QuantumFidelityContext';
import Layout from './components/layout/Layout';
import LoadingSpinner from './components/LoadingSpinner';
import Toast from './components/Toast';
import ReloadPrompt from './components/ReloadPrompt';

// Lazy load components
const GenesisPage = lazy(() => import('./pages/GenesisPage'));
const FeedPage = lazy(() => import('./pages/FeedPage'));
const ChatPage = lazy(() => import('./pages/ChatPage'));
const ProfilePage = lazy(() => import('./pages/ProfilePage'));
const LivePage = lazy(() => import('./pages/LivePage'));
const StreamPage = lazy(() => import('./pages/StreamPage'));
const MatchmakingPage = lazy(() => import('./pages/MatchmakingPage'));
const CreatorStudioPage = lazy(() => import('./pages/CreatorStudioPage'));
const HealthStatus = lazy(() => import('./components/HealthStatus'));
const DivineOracle = lazy(() => import('./components/DivineOracle'));

// Protected route component
const ProtectedRoute: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const { user, isLoading } = useAuth();

  if (isLoading) {
    return <div className="flex items-center justify-center min-h-screen">
      <LoadingSpinner />
    </div>;
  }

  if (!user) {
    return <Navigate to="/" replace />;
  }

  return <>{children}</>;
};

const AppRouter: React.FC = () => {
  return (
    <Routes>
      <Route path="/" element={<GenesisPage />} />
      <Route path="/feed" element={
        <ProtectedRoute>
          <FeedPage />
        </ProtectedRoute>
      } />
      <Route path="/chat" element={
        <ProtectedRoute>
          <ChatPage />
        </ProtectedRoute>
      } />
      <Route path="/profile" element={
        <ProtectedRoute>
          <ProfilePage />
        </ProtectedRoute>
      } />
      <Route path="/profile/:handle" element={
        <ProtectedRoute>
          <ProfilePage />
        </ProtectedRoute>
      } />
      <Route path="/live" element={
        <ProtectedRoute>
          <LivePage />
        </ProtectedRoute>
      } />
      <Route path="/stream/:id" element={
        <ProtectedRoute>
          <StreamPage />
        </ProtectedRoute>
      } />
      <Route path="/matchmaking" element={
        <ProtectedRoute>
          <MatchmakingPage />
        </ProtectedRoute>
      } />
      <Route path="/studio" element={
        <ProtectedRoute>
          <CreatorStudioPage />
        </ProtectedRoute>
      } />
      <Route path="*" element={<Navigate to="/" replace />} />
    </Routes>
  );
};

const App: React.FC = () => {
  return (
    <Router>
      <ThemeProvider>
        <ToastProvider>
          <AuthProvider>
            <QuantumFidelityProvider>
              <Layout>
                <Suspense fallback={
                  <div className="flex items-center justify-center min-h-screen">
                    <LoadingSpinner />
                  </div>
                }>
                  <AppRouter />
                  <HealthStatus />
                  <DivineOracle />
                </Suspense>
              </Layout>
              <Toast />
              <ReloadPrompt />
            </QuantumFidelityProvider>
          </AuthProvider>
        </ToastProvider>
      </ThemeProvider>
    </Router>
  );
};

export default App;
    if (path.startsWith('/stream/')) {
        const streamId = path.split('/')[2];
        return <StreamPage streamId={streamId} />;
    }
    
    if (path.startsWith('/profile/')) {
        const handle = path.split('/')[2];
        return <ProfilePage userHandle={handle} />;
    }

    switch (path) {
        case '/live':
            return <LivePage />;
        case '/matchmaking':
            return <MatchmakingPage />;
        case '/chat':
            return <ChatPage />;
        case '/profile':
            return <ProfilePage />;
        case '/creator-studio':
            return <CreatorStudioPage />;
        case '/':
        default:
            return <FeedPage />;
    }
  };

  return <Layout>{renderPage()}</Layout>;
};

const HealthStatus = lazy(() => import('./components/HealthStatus'));
const DivineOracle = lazy(() => import('./components/DivineOracle'));

const App: React.FC = () => {
  return (
    <ThemeProvider>
      <ToastProvider>
        <AuthProvider>
          <QuantumFidelityProvider>
            <ReloadPrompt />
            <AppRouter />
            <Toast />
            <Suspense fallback={null}>
              <HealthStatus />
              <DivineOracle />
            </Suspense>
          </QuantumFidelityProvider>
        </AuthProvider>
      </ToastProvider>
    </ThemeProvider>
  );
};

export default App;